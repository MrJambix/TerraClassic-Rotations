// lib/nearby-npcs.js
// Tracks spawned NPCs and provides a function to get those within a certain distance of the player

class NearbyNpcs {
    constructor(mod) {
        this.mod = mod;
        this.npcs = new Map(); // gameId -> npcData

        // Listen for NPC spawns and despawns
        mod.hook('S_SPAWN_NPC', 11, event => {
            this.npcs.set(event.gameId, {
                gameId: event.gameId,
                huntingZoneId: event.huntingZoneId,
                templateId: event.templateId,
                loc: Object.assign({}, event.loc),
                w: event.w,
                alive: true
            });
        });

        mod.hook('S_DESPAWN_NPC', 3, event => {
            this.npcs.delete(event.gameId);
        });

        // Track location updates
        mod.hook('S_NPC_LOCATION', 3, event => {
            if (this.npcs.has(event.gameId)) {
                let npc = this.npcs.get(event.gameId);
                npc.loc = Object.assign({}, event.loc);
                npc.w = event.w;
                this.npcs.set(event.gameId, npc);
            }
        });

        // Track alive/dead state
        mod.hook('S_CREATURE_LIFE', 3, event => {
            if (this.npcs.has(event.gameId)) {
                let npc = this.npcs.get(event.gameId);
                npc.alive = event.alive;
                this.npcs.set(event.gameId, npc);
            }
        });

        // Wipe list on zone change
        mod.hook('S_LOAD_TOPO', 3, () => {
            this.npcs.clear();
        });
    }

    // Returns array of NPCs within 'radius' (in meters) of playerLoc {x, y, z}
    // Default range is now 5m (for melee), but can be dynamically set for other classes
    getNearbyNpcs(playerLoc, radius = 5) {
        const thresholdSq = (radius * 100) * (radius * 100); // in game units (1m = 100 units)
        let arr = [];
        for (const npc of this.npcs.values()) {
            if (!npc.alive) continue;
            if (!npc.loc) continue;
            const dx = npc.loc.x - playerLoc.x;
            const dy = npc.loc.y - playerLoc.y;
            const dz = npc.loc.z - playerLoc.z;
            const distSq = dx * dx + dy * dy + dz * dz;
            if (distSq <= thresholdSq) {
                arr.push(npc);
            }
        }
        return arr;
    }

    // Optionally: get closest NPC (alive) within given range (default 5m)
    getClosestNpc(playerLoc, maxRadius = 5) {
        let minDist = Infinity, closest = null;
        const thresholdSq = (maxRadius * 100) * (maxRadius * 100);
        for (const npc of this.npcs.values()) {
            if (!npc.alive) continue;
            if (!npc.loc) continue;
            const dx = npc.loc.x - playerLoc.x;
            const dy = npc.loc.y - playerLoc.y;
            const dz = npc.loc.z - playerLoc.z;
            const distSq = dx * dx + dy * dy + dz * dz;
            if (distSq < minDist && (maxRadius <= 0 || distSq <= thresholdSq)) {
                minDist = distSq;
                closest = npc;
            }
        }
        return closest;
    }
}

module.exports = NearbyNpcs;